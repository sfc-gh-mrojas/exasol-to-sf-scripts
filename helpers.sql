-- HASHTYPE_MD5 function with overloads for 1-15 arguments
-- Each function creates an MD5 hash from concatenated input arguments




-- 1 argument
CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 VARCHAR)
RETURNS BINARY
LANGUAGE SQL
AS
$$
  CASE
    WHEN arg1 IS NULL THEN NULL
    ELSE  
    MD5_BINARY('"' || arg1 || '"')
  END
$$;

CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 NUMBER)
RETURNS BINARY
LANGUAGE SQL
AS
$$
  CASE
    WHEN arg1 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(arg1)
  END
$$;

CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 BINARY)
RETURNS BINARY
LANGUAGE SQL
AS
$$
  CASE
    WHEN arg1 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(arg1)
  END
$$;


-- 2 arguments
CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 VARCHAR, arg2 VARCHAR)
RETURNS BINARY
LANGUAGE SQL
AS
$$
    CASE
    WHEN arg1 IS NULL OR arg2 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    '"' || arg1 || '"', 
    '"' || arg2 || '"'), ''))
  END
$$;


CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 VARCHAR, arg2 NUMBER)
RETURNS BINARY
LANGUAGE SQL
AS
$$
    CASE
    WHEN arg1 IS NULL OR arg2 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    '"' || arg1 || '"', 
    arg2), ''))
  END
$$;

CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 NUMBER, arg2 NUMBER)
RETURNS BINARY
LANGUAGE SQL
AS
$$
    CASE
    WHEN arg1 IS NULL OR arg2 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    arg1, 
    arg2), ''))
  END
$$;

CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 BINARY, arg2 VARCHAR)
RETURNS BINARY
LANGUAGE SQL
AS
$$
    CASE
    WHEN arg1 IS NULL OR arg2 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    'b' || arg1::STRING, 
    '"' || arg2 || '"'), ''))
  END
$$;


CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 VARCHAR, arg2 BINARY)
RETURNS BINARY
LANGUAGE SQL
AS
$$
    CASE
    WHEN arg1 IS NULL OR arg2 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    '"' || arg1 || '"', 
    'b' || arg2::STRING), ''))
  END
$$;


CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 BINARY, arg2 BINARY)
RETURNS BINARY
LANGUAGE SQL
AS
$$
    CASE
    WHEN arg1 IS NULL OR arg2 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    'b' || arg1::STRING, 
    'b' || arg2::STRING), ''))
  END
$$;


-- 3 arguments
CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 VARCHAR, arg2 VARCHAR, arg3 VARCHAR)
RETURNS BINARY
LANGUAGE SQL
AS
$$
  CASE
    WHEN arg1 IS NULL OR arg2 IS NULL OR arg3 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    '"' || arg1 || '"', 
    '"' || arg2 || '"', 
    '"' || arg3 || '"'), ''))
  END
$$;

CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 BINARY, arg2 VARCHAR, arg3 VARCHAR)
RETURNS BINARY
LANGUAGE SQL
AS
$$
  CASE
    WHEN arg1 IS NULL OR arg2 IS NULL OR arg3 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    'b' || arg1::STRING, 
    '"' || arg2 || '"', 
    '"' || arg3 || '"'), ''))
  END
$$;

-- 4 arguments
CREATE OR REPLACE FUNCTION HASHTYPE_MD5(arg1 BINARY, arg2 VARCHAR, arg3 VARCHAR, arg4 VARCHAR)
RETURNS BINARY
LANGUAGE SQL
AS
$$
  CASE
    WHEN arg1 IS NULL OR arg2 IS NULL OR arg3 IS NULL OR arg4 IS NULL THEN NULL
    ELSE  
    MD5_BINARY(ARRAY_TO_STRING(ARRAY_CONSTRUCT(
    'b' || arg1::STRING, 
    '"' || arg2 || '"', 
    '"' || arg3 || '"', 
    '"' || arg4 || '"'), ''))
  END
$$;


CREATE OR REPLACE FUNCTION ADD_DAYS(input_date DATE, days_to_add INT)
RETURNS DATE
LANGUAGE SQL
AS
$$
    DATEADD(DAY, days_to_add, input_date)
$$;


CREATE OR REPLACE FUNCTION ADD_DAYS(input_ts TIMESTAMP_NTZ, days_to_add INT)
RETURNS TIMESTAMP_NTZ
LANGUAGE SQL
AS
$$
    DATEADD(DAY, days_to_add, input_ts)
$$;

CREATE OR REPLACE FUNCTION ADD_MINUTES(ts TIMESTAMP, minutes_to_add NUMBER)
RETURNS TIMESTAMP
LANGUAGE SQL
AS
$$
    DATEADD(MINUTE, ROUND(minutes_to_add), ts)
$$;


CREATE OR REPLACE FUNCTION DAYS_BETWEEN(d1 TIMESTAMP_NTZ, d2 TIMESTAMP_NTZ)
RETURNS NUMBER
LANGUAGE SQL
AS
$$
    DATEDIFF(DAY, d2, d1)
$$;


CREATE OR REPLACE FUNCTION DAYS_BETWEEN(d1 DATE, d2 DATE)
RETURNS NUMBER
LANGUAGE SQL
AS
$$
    DATEDIFF(DAY, d2, d1)
$$;


CREATE OR REPLACE FUNCTION ADD_YEARS(d TIMESTAMP_NTZ, years_to_add NUMBER)
RETURNS TIMESTAMP_NTZ
LANGUAGE SQL
AS
$$
    DATEADD(YEAR, years_to_add, d)
$$;

CREATE OR REPLACE FUNCTION ADD_YEARS(d DATE, years_to_add NUMBER)
RETURNS DATE
LANGUAGE SQL
AS
$$
    DATEADD(YEAR, years_to_add, d)
$$;

CREATE OR REPLACE FUNCTION ADD_HOURS(ts TIMESTAMP_NTZ, hours_to_add NUMBER)
RETURNS TIMESTAMP_NTZ
LANGUAGE SQL
AS
$$
    DATEADD(HOUR, hours_to_add, ts)
$$;

CREATE OR REPLACE FUNCTION ADD_HOURS(d DATE, hours_to_add NUMBER)
RETURNS TIMESTAMP_NTZ
LANGUAGE SQL
AS
$$
    DATEADD(HOUR, hours_to_add, d)
$$;